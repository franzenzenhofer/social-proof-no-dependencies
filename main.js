// Generated by CoffeeScript 1.10.0
(function() {
  var _DEBUG_, d, getJsonP, getJsonPAfterEvent, gone_get_them_all, isInt, proof_urls, proof_urls_later, ref1, socialProof;

  _DEBUG_ = (ref1 = window._DEBUG_) != null ? ref1 : false;

  d = function(m, debug) {
    if (debug == null) {
      debug = _DEBUG_;
    }
    if (debug) {
      return console.log(m);
    }
  };

  isInt = function(value) {
    return !isNaN(value) && parseInt(Number(value)) === value && !isNaN(parseInt(value, 10));
  };

  getJsonP = function(url, callback) {
    var ref, script;
    ref = window.document.getElementsByTagName('script')[0];
    script = window.document.createElement('script');
    script.src = url + (url.indexOf('?') + 1 ? '&' : '?') + 'callback=' + callback;
    ref.parentNode.insertBefore(script, ref);
    return script.onload = function() {
      this.remove();
    };
  };

  getJsonPAfterEvent = function(url, callback, event) {
    return window.addEventListener(event, (function(e) {
      getJsonP(url, callback);
      return console.log(e);
    }), {
      'once': true
    });
  };

  proof_urls = {
    "facebook": "https://graph.facebook.com/?id="
  };

  proof_urls_later = {
    "pinterest": "https://widgets.pinterest.com/v1/urls/count.json?url=",
    "linkedin": "https://www.linkedin.com/countserv/count/share?url="
  };

  gone_get_them_all = function(data) {
    var r, ref2, ref3, ref4, ref5, ref6, ref7, ref8, ref9;
    d(data);
    r = 0;
    if (isInt(data)) {
      r = data;
    } else if (data === null || data === void 0) {
      r = 0;
    } else {
      r = (ref2 = (ref3 = (ref4 = (ref5 = (ref6 = data != null ? data.total_count : void 0) != null ? ref6 : data != null ? data.count : void 0) != null ? ref5 : data != null ? (ref7 = data[0]) != null ? ref7.total_count : void 0 : void 0) != null ? ref4 : data != null ? (ref8 = data[0]) != null ? ref8.count : void 0 : void 0) != null ? ref3 : data != null ? (ref9 = data.share) != null ? ref9.share_count : void 0 : void 0) != null ? ref2 : 0;
    }
    return r;
  };

  window.socialProof = socialProof = function(url, placeholder_class) {
    var collect_and_update, counter, http_url, https_url, n, ref2, ref3, ref4, ref5, ref6, ref7, results, u, update;
    if (url == null) {
      url = (ref2 = (ref3 = (ref4 = document.querySelectorAll('meta[property="og:url"]')) != null ? (ref5 = ref4[0]) != null ? ref5.content : void 0 : void 0) != null ? ref3 : (ref6 = document.querySelectorAll('link[rel=canonical]')) != null ? (ref7 = ref6[0]) != null ? ref7.href : void 0 : void 0) != null ? ref2 : window.top.location.href;
    }
    counter = 0;
    update = function(placeholder_class) {
      var elem, elements, i, len, results;
      if (placeholder_class && counter !== 0) {
        elements = document.getElementsByClassName(placeholder_class);
        results = [];
        for (i = 0, len = elements.length; i < len; i++) {
          elem = elements[i];
          results.push(elem.innerHTML = counter);
        }
        return results;
      } else {
        return typeof console !== "undefined" && console !== null ? console.log(counter) : void 0;
      }
    };
    window.collect_and_update = collect_and_update = function(data) {
      d(data);
      counter = counter + gone_get_them_all(data);
      d('counter:' + counter);
      return update(placeholder_class);
    };
    https_url = url.replace(/^http:\/\//i, 'https://');
    http_url = url.replace(/^https:\/\//i, 'http://');
    d('URL:' + url);
    https_url = encodeURIComponent(https_url);
    http_url = encodeURIComponent(http_url);
    d('encoded URL:' + url);
    for (n in proof_urls) {
      u = proof_urls[n];
      getJsonP("" + u + http_url, 'collect_and_update');
      getJsonP("" + u + https_url, 'collect_and_update');
    }
    results = [];
    for (n in proof_urls_later) {
      u = proof_urls_later[n];
      getJsonPAfterEvent("" + u + http_url, 'collect_and_update', 'scroll');
      results.push(getJsonPAfterEvent("" + u + https_url, 'collect_and_update', 'scroll'));
    }
    return results;
  };

}).call(this);
